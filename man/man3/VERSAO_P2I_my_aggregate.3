.TH "VERSAO_P2I.my_aggregate" 3 "Jeudi 30 Juin 2016" "VERSAO" \" -*- nroff -*-
.ad l
.nh
.SH NAME
VERSAO_P2I.my_aggregate \- 
.SH SYNOPSIS
.br
.PP
.SS "Fonctions"

.in +1c
.ti -1c
.RI "def \fBview_as_blocks\fP (arr_in, block_shape)"
.br
.ti -1c
.RI "def \fBview_as_windows\fP (arr_in, window_shape, step=1)"
.br
.ti -1c
.RI "def \fBblock_reduce\fP (image, block_size, func=np\&.sum, cval=0)"
.br
.in -1c
.SH "Documentation des fonctions"
.PP 
.SS "def VERSAO_P2I\&.my_aggregate\&.block_reduce ( image,  block_size,  func = \fCnp\&.sum\fP,  cval = \fC0\fP)"

.PP
.nf
Down-sample image by applying function to local blocks.
https://github.com/scikit-image/scikit-image/blob/master/skimage/measure/block.py#L5
Parameters
----------
image : ndarray
    N-dimensional input image.
block_size : array_like
    Array containing down-sampling integer factor along each axis.
func : callable
    Function object which is used to calculate the return value for each
    local block. This function must implement an ``axis`` parameter such
    as ``numpy.sum`` or ``numpy.min``.
cval : float
    Constant padding value if image is not perfectly divisible by the
    block size.
Returns
-------
image : ndarray
    Down-sampled image with same number of dimensions as input image.
Examples
--------
>>> from skimage.measure import block_reduce
>>> image = np.arange(3*3*4).reshape(3, 3, 4)
>>> image # doctest: +NORMALIZE_WHITESPACE
array([[[ 0,  1,  2,  3],
        [ 4,  5,  6,  7],
        [ 8,  9, 10, 11]],
       [[12, 13, 14, 15],
        [16, 17, 18, 19],
        [20, 21, 22, 23]],
       [[24, 25, 26, 27],
        [28, 29, 30, 31],
        [32, 33, 34, 35]]])
>>> block_reduce(image, block_size=(3, 3, 1), func=np.mean)
array([[[ 16.,  17.,  18.,  19.]]])
>>> image_max1 = block_reduce(image, block_size=(1, 3, 4), func=np.max)
>>> image_max1 # doctest: +NORMALIZE_WHITESPACE
array([[[11]],
       [[23]],
       [[35]]])
>>> image_max2 = block_reduce(image, block_size=(3, 1, 4), func=np.max)
>>> image_max2 # doctest: +NORMALIZE_WHITESPACE
array([[[27],
        [31],
        [35]]])

.fi
.PP
 
.PP
Définition à la ligne 258 du fichier my_aggregate\&.py\&.
.PP
Références VERSAO_P2I\&.my_aggregate\&.view_as_blocks()\&.
.SS "def VERSAO_P2I\&.my_aggregate\&.view_as_blocks ( arr_in,  block_shape)"

.PP
.nf
https://github.com/scikit-image/scikit-image/blob/master/skimage/util/shape.py

Block view of the input n-dimensional array (using re-striding).
Blocks are non-overlapping views of the input array.
Parameters
----------
arr_in : ndarray
    N-d input array.
block_shape : tuple
    The shape of the block. Each dimension must divide evenly into the
    corresponding dimensions of `arr_in`.
Returns
-------
arr_out : ndarray
    Block view of the input array.  If `arr_in` is non-contiguous, a copy
    is made.
Examples
--------
>>> import numpy as np
>>> from skimage.util.shape import view_as_blocks
>>> A = np.arange(4*4).reshape(4,4)
>>> A
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])
>>> B = view_as_blocks(A, block_shape=(2, 2))
>>> B[0, 0]
array([[0, 1],
       [4, 5]])
>>> B[0, 1]
array([[2, 3],
       [6, 7]])
>>> B[1, 0, 1, 1]
13
>>> A = np.arange(4*4*6).reshape(4,4,6)
>>> A  # doctest: +NORMALIZE_WHITESPACE
array([[[ 0,  1,  2,  3,  4,  5],
        [ 6,  7,  8,  9, 10, 11],
        [12, 13, 14, 15, 16, 17],
        [18, 19, 20, 21, 22, 23]],
       [[24, 25, 26, 27, 28, 29],
        [30, 31, 32, 33, 34, 35],
        [36, 37, 38, 39, 40, 41],
        [42, 43, 44, 45, 46, 47]],
       [[48, 49, 50, 51, 52, 53],
        [54, 55, 56, 57, 58, 59],
        [60, 61, 62, 63, 64, 65],
        [66, 67, 68, 69, 70, 71]],
       [[72, 73, 74, 75, 76, 77],
        [78, 79, 80, 81, 82, 83],
        [84, 85, 86, 87, 88, 89],
        [90, 91, 92, 93, 94, 95]]])
>>> B = view_as_blocks(A, block_shape=(1, 2, 2))
>>> B.shape
(4, 2, 3, 1, 2, 2)
>>> B[2:, 0, 2]  # doctest: +NORMALIZE_WHITESPACE
array([[[[52, 53],
         [58, 59]]],
       [[[76, 77],
         [82, 83]]]])

.fi
.PP
 
.PP
Définition à la ligne 25 du fichier my_aggregate\&.py\&.
.SS "def VERSAO_P2I\&.my_aggregate\&.view_as_windows ( arr_in,  window_shape,  step = \fC1\fP)"

.PP
.nf
Rolling window view of the input n-dimensional array.
Windows are overlapping views of the input array, with adjacent windows
shifted by a single row or column (or an index of a higher dimension).
Parameters
----------
arr_in : ndarray
    N-d input array.
window_shape : tuple
    Defines the shape of the elementary n-dimensional orthotope
    (better know as hyperrectangle [1]_) of the rolling window view.
step : int, optional
    Number of elements to skip when moving the window forward (by
    default, move forward by one). The value must be equal or larger
    than one.
Returns
-------
arr_out : ndarray
    (rolling) window view of the input array.   If `arr_in` is
    non-contiguous, a copy is made.
Notes
-----
One should be very careful with rolling views when it comes to
memory usage.  Indeed, although a 'view' has the same memory
footprint as its base array, the actual array that emerges when this
'view' is used in a computation is generally a (much) larger array
than the original, especially for 2-dimensional arrays and above.
For example, let us consider a 3 dimensional array of size (100,
100, 100) of ``float64``. This array takes about 8*100**3 Bytes for
storage which is just 8 MB. If one decides to build a rolling view
on this array with a window of (3, 3, 3) the hypothetical size of
the rolling view (if one was to reshape the view for example) would
be 8*(100-3+1)**3*3**3 which is about 203 MB! The scaling becomes
even worse as the dimension of the input array becomes larger.
References
----------
.. [1] http://en.wikipedia.org/wiki/Hyperrectangle
Examples
--------
>>> import numpy as np
>>> from skimage.util.shape import view_as_windows
>>> A = np.arange(4*4).reshape(4,4)
>>> A
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15]])
>>> window_shape = (2, 2)
>>> B = view_as_windows(A, window_shape)
>>> B[0, 0]
array([[0, 1],
       [4, 5]])
>>> B[0, 1]
array([[1, 2],
       [5, 6]])
>>> A = np.arange(10)
>>> A
array([0, 1, 2, 3, 4, 5, 6, 7, 8, 9])
>>> window_shape = (3,)
>>> B = view_as_windows(A, window_shape)
>>> B.shape
(8, 3)
>>> B
array([[0, 1, 2],
       [1, 2, 3],
       [2, 3, 4],
       [3, 4, 5],
       [4, 5, 6],
       [5, 6, 7],
       [6, 7, 8],
       [7, 8, 9]])
>>> A = np.arange(5*4).reshape(5, 4)
>>> A
array([[ 0,  1,  2,  3],
       [ 4,  5,  6,  7],
       [ 8,  9, 10, 11],
       [12, 13, 14, 15],
       [16, 17, 18, 19]])
>>> window_shape = (4, 3)
>>> B = view_as_windows(A, window_shape)
>>> B.shape
(2, 2, 4, 3)
>>> B  # doctest: +NORMALIZE_WHITESPACE
array([[[[ 0,  1,  2],
         [ 4,  5,  6],
         [ 8,  9, 10],
         [12, 13, 14]],
        [[ 1,  2,  3],
         [ 5,  6,  7],
         [ 9, 10, 11],
         [13, 14, 15]]],
       [[[ 4,  5,  6],
         [ 8,  9, 10],
         [12, 13, 14],
         [16, 17, 18]],
        [[ 5,  6,  7],
         [ 9, 10, 11],
         [13, 14, 15],
         [17, 18, 19]]]])

.fi
.PP
 
.PP
Définition à la ligne 120 du fichier my_aggregate\&.py\&.
.SH "Auteur"
.PP 
Généré automatiquement par Doxygen pour VERSAO à partir du code source\&.
